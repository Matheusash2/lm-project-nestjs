generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Register models:

model User {
  id        String    @id @default(cuid())
  userName  String    @unique
  password  String
  name      String?
  lastName  String?
  createdAt DateTime  @default(now())
  employee  Employee?

  @@map("users")
}

model Employee {
  id             String          @id @default(cuid())
  email          String?         @unique
  dateOfBirth    String?
  cpf            String?         @unique
  rg             RG?
  identification Identification?
  contact        Contact[]
  address        Address[]
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id])

  @@map("employees")
}

model Identification {
  id             String   @id @default(cuid())
  fatherName     String
  motherName     String
  sex            String
  maritalStatus  String
  nationality    String
  countryOfBirth String
  stateOfBirth   String
  cityOfBirth    String
  employeeId     String   @unique
  employee       Employee @relation(fields: [employeeId], references: [id])

  @@map("identifications")
}

model RG {
  id               String   @id @default(cuid())
  number           String
  emissionDate     String
  issuingAuthority String
  issuingState     String
  employeeId       String   @unique
  employee         Employee @relation(fields: [employeeId], references: [id])

  @@map("RGs")
}

model Contact {
  id         String   @id @default(cuid())
  telephone  String
  ddd        String
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("contacts")
}

model Address {
  id           String   @id @default(cuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  cep          String
  city         String
  state        String
  employeeId   String
  employee     Employee @relation(fields: [employeeId], references: [id])

  @@map("addresses")
}

//Clients models:

model Client {
  id                   String                @id @default(cuid())
  name                 String
  lastName             String?
  dateOfBirth          String?
  cpf                  String?               @unique
  inssPassword         String?
  contracts            Contract[]
  rgClient             RGClient?
  identificationClient IdentificationClient?
  contactClient        ContactClient[]
  addressClient        AddressClient[]
  createdAt            DateTime              @default(now())

  @@map("clients")
}

model Contract {
  id             String @id @default(cuid())
  proposalNumber String
  bank           String
  contractDate   String
  valuePaid      Float
  interest       Float
  installments   Int
  totalPaid      Float
  commission     Float
  currentCode    String
  clientId       String
  client         Client @relation(fields: [clientId], references: [id])

  @@map("contracts")
}

model IdentificationClient {
  id             String @id @default(cuid())
  fatherName     String
  motherName     String
  sex            String
  maritalStatus  String
  nationality    String
  countryOfBirth String
  stateOfBirth   String
  cityOfBirth    String
  clientId       String @unique
  client         Client @relation(fields: [clientId], references: [id])

  @@map("identificationsClients")
}

model RGClient {
  id               String @id @default(cuid())
  number           String
  emissionDate     String
  issuingAuthority String
  issuingState     String
  clientId         String @unique
  client           Client @relation(fields: [clientId], references: [id])

  @@map("RGsClients")
}

model ContactClient {
  id        String @id @default(cuid())
  telephone String
  ddd       String
  clientId  String
  client    Client @relation(fields: [clientId], references: [id])

  @@map("contactsClients")
}

model AddressClient {
  id           String  @id @default(cuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  cep          String
  city         String
  state        String
  clientId     String
  client       Client  @relation(fields: [clientId], references: [id])

  @@map("addressesClients")
}
